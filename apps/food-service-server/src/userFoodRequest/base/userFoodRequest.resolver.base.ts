/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserFoodRequest } from "./UserFoodRequest";
import { UserFoodRequestCountArgs } from "./UserFoodRequestCountArgs";
import { UserFoodRequestFindManyArgs } from "./UserFoodRequestFindManyArgs";
import { UserFoodRequestFindUniqueArgs } from "./UserFoodRequestFindUniqueArgs";
import { CreateUserFoodRequestArgs } from "./CreateUserFoodRequestArgs";
import { UpdateUserFoodRequestArgs } from "./UpdateUserFoodRequestArgs";
import { DeleteUserFoodRequestArgs } from "./DeleteUserFoodRequestArgs";
import { PreviousFoodItemsFindManyArgs } from "../../previousFoodItems/base/PreviousFoodItemsFindManyArgs";
import { PreviousFoodItems } from "../../previousFoodItems/base/PreviousFoodItems";
import { FoodRequestInputDto } from "../FoodRequestInputDto";
import { FoodRequestOutputDto } from "../FoodRequestOutputDto";
import { UserFoodRequestService } from "../userFoodRequest.service";
@graphql.Resolver(() => UserFoodRequest)
export class UserFoodRequestResolverBase {
  constructor(protected readonly service: UserFoodRequestService) {}

  async _userFoodRequestsMeta(
    @graphql.Args() args: UserFoodRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserFoodRequest])
  async userFoodRequests(
    @graphql.Args() args: UserFoodRequestFindManyArgs
  ): Promise<UserFoodRequest[]> {
    return this.service.userFoodRequests(args);
  }

  @graphql.Query(() => UserFoodRequest, { nullable: true })
  async userFoodRequest(
    @graphql.Args() args: UserFoodRequestFindUniqueArgs
  ): Promise<UserFoodRequest | null> {
    const result = await this.service.userFoodRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserFoodRequest)
  async createUserFoodRequest(
    @graphql.Args() args: CreateUserFoodRequestArgs
  ): Promise<UserFoodRequest> {
    return await this.service.createUserFoodRequest({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserFoodRequest)
  async updateUserFoodRequest(
    @graphql.Args() args: UpdateUserFoodRequestArgs
  ): Promise<UserFoodRequest | null> {
    try {
      return await this.service.updateUserFoodRequest({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserFoodRequest)
  async deleteUserFoodRequest(
    @graphql.Args() args: DeleteUserFoodRequestArgs
  ): Promise<UserFoodRequest | null> {
    try {
      return await this.service.deleteUserFoodRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [PreviousFoodItems], {
    name: "previousFoodItemsItems",
  })
  async findPreviousFoodItemsItems(
    @graphql.Parent() parent: UserFoodRequest,
    @graphql.Args() args: PreviousFoodItemsFindManyArgs
  ): Promise<PreviousFoodItems[]> {
    const results = await this.service.findPreviousFoodItemsItems(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.Mutation(() => FoodRequestOutputDto)
  async CreateFoodRequest(
    @graphql.Args()
    args: FoodRequestInputDto
  ): Promise<FoodRequestOutputDto> {
    return this.service.CreateFoodRequest(args);
  }
}
