/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserFoodRequestService } from "../userFoodRequest.service";
import { UserFoodRequestCreateInput } from "./UserFoodRequestCreateInput";
import { UserFoodRequest } from "./UserFoodRequest";
import { UserFoodRequestFindManyArgs } from "./UserFoodRequestFindManyArgs";
import { UserFoodRequestWhereUniqueInput } from "./UserFoodRequestWhereUniqueInput";
import { UserFoodRequestUpdateInput } from "./UserFoodRequestUpdateInput";
import { PreviousFoodItemsFindManyArgs } from "../../previousFoodItems/base/PreviousFoodItemsFindManyArgs";
import { PreviousFoodItems } from "../../previousFoodItems/base/PreviousFoodItems";
import { PreviousFoodItemsWhereUniqueInput } from "../../previousFoodItems/base/PreviousFoodItemsWhereUniqueInput";
import { FoodRequestInputDto } from "../FoodRequestInputDto";
import { FoodRequestOutputDto } from "../FoodRequestOutputDto";

export class UserFoodRequestControllerBase {
  constructor(protected readonly service: UserFoodRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserFoodRequest })
  async createUserFoodRequest(
    @common.Body() data: UserFoodRequestCreateInput
  ): Promise<UserFoodRequest> {
    return await this.service.createUserFoodRequest({
      data: data,
      select: {
        cookingSteps: true,
        createdAt: true,
        food: true,
        id: true,
        items: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserFoodRequest] })
  @ApiNestedQuery(UserFoodRequestFindManyArgs)
  async userFoodRequests(
    @common.Req() request: Request
  ): Promise<UserFoodRequest[]> {
    const args = plainToClass(UserFoodRequestFindManyArgs, request.query);
    return this.service.userFoodRequests({
      ...args,
      select: {
        cookingSteps: true,
        createdAt: true,
        food: true,
        id: true,
        items: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserFoodRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userFoodRequest(
    @common.Param() params: UserFoodRequestWhereUniqueInput
  ): Promise<UserFoodRequest | null> {
    const result = await this.service.userFoodRequest({
      where: params,
      select: {
        cookingSteps: true,
        createdAt: true,
        food: true,
        id: true,
        items: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserFoodRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserFoodRequest(
    @common.Param() params: UserFoodRequestWhereUniqueInput,
    @common.Body() data: UserFoodRequestUpdateInput
  ): Promise<UserFoodRequest | null> {
    try {
      return await this.service.updateUserFoodRequest({
        where: params,
        data: data,
        select: {
          cookingSteps: true,
          createdAt: true,
          food: true,
          id: true,
          items: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserFoodRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserFoodRequest(
    @common.Param() params: UserFoodRequestWhereUniqueInput
  ): Promise<UserFoodRequest | null> {
    try {
      return await this.service.deleteUserFoodRequest({
        where: params,
        select: {
          cookingSteps: true,
          createdAt: true,
          food: true,
          id: true,
          items: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/previousFoodItemsItems")
  @ApiNestedQuery(PreviousFoodItemsFindManyArgs)
  async findPreviousFoodItemsItems(
    @common.Req() request: Request,
    @common.Param() params: UserFoodRequestWhereUniqueInput
  ): Promise<PreviousFoodItems[]> {
    const query = plainToClass(PreviousFoodItemsFindManyArgs, request.query);
    const results = await this.service.findPreviousFoodItemsItems(params.id, {
      ...query,
      select: {
        createdAt: true,
        food: true,
        id: true,
        updatedAt: true,

        userFoodRequest: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/previousFoodItemsItems")
  async connectPreviousFoodItemsItems(
    @common.Param() params: UserFoodRequestWhereUniqueInput,
    @common.Body() body: PreviousFoodItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      previousFoodItemsItems: {
        connect: body,
      },
    };
    await this.service.updateUserFoodRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/previousFoodItemsItems")
  async updatePreviousFoodItemsItems(
    @common.Param() params: UserFoodRequestWhereUniqueInput,
    @common.Body() body: PreviousFoodItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      previousFoodItemsItems: {
        set: body,
      },
    };
    await this.service.updateUserFoodRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/previousFoodItemsItems")
  async disconnectPreviousFoodItemsItems(
    @common.Param() params: UserFoodRequestWhereUniqueInput,
    @common.Body() body: PreviousFoodItemsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      previousFoodItemsItems: {
        disconnect: body,
      },
    };
    await this.service.updateUserFoodRequest({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/food-request")
  @swagger.ApiOkResponse({
    type: FoodRequestOutputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateFoodRequest(
    @common.Body()
    body: FoodRequestInputDto
  ): Promise<FoodRequestOutputDto> {
    return this.service.CreateFoodRequest(body);
  }
}
