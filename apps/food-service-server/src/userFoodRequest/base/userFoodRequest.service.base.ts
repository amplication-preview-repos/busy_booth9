/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserFoodRequest as PrismaUserFoodRequest,
  PreviousFoodItems as PrismaPreviousFoodItems,
} from "@prisma/client";

import { FoodRequestInputDto } from "../FoodRequestInputDto";
import { FoodRequestOutputDto } from "../FoodRequestOutputDto";

export class UserFoodRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserFoodRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userFoodRequest.count(args);
  }

  async userFoodRequests(
    args: Prisma.UserFoodRequestFindManyArgs
  ): Promise<PrismaUserFoodRequest[]> {
    return this.prisma.userFoodRequest.findMany(args);
  }
  async userFoodRequest(
    args: Prisma.UserFoodRequestFindUniqueArgs
  ): Promise<PrismaUserFoodRequest | null> {
    return this.prisma.userFoodRequest.findUnique(args);
  }
  async createUserFoodRequest(
    args: Prisma.UserFoodRequestCreateArgs
  ): Promise<PrismaUserFoodRequest> {
    return this.prisma.userFoodRequest.create(args);
  }
  async updateUserFoodRequest(
    args: Prisma.UserFoodRequestUpdateArgs
  ): Promise<PrismaUserFoodRequest> {
    return this.prisma.userFoodRequest.update(args);
  }
  async deleteUserFoodRequest(
    args: Prisma.UserFoodRequestDeleteArgs
  ): Promise<PrismaUserFoodRequest> {
    return this.prisma.userFoodRequest.delete(args);
  }

  async findPreviousFoodItemsItems(
    parentId: string,
    args: Prisma.PreviousFoodItemsFindManyArgs
  ): Promise<PrismaPreviousFoodItems[]> {
    return this.prisma.userFoodRequest
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .previousFoodItemsItems(args);
  }
  async CreateFoodRequest(
    args: FoodRequestInputDto
  ): Promise<FoodRequestOutputDto> {
    throw new Error("Not implemented");
  }
}
