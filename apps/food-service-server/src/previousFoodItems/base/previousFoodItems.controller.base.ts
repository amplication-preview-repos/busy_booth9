/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PreviousFoodItemsService } from "../previousFoodItems.service";
import { PreviousFoodItemsCreateInput } from "./PreviousFoodItemsCreateInput";
import { PreviousFoodItems } from "./PreviousFoodItems";
import { PreviousFoodItemsFindManyArgs } from "./PreviousFoodItemsFindManyArgs";
import { PreviousFoodItemsWhereUniqueInput } from "./PreviousFoodItemsWhereUniqueInput";
import { PreviousFoodItemsUpdateInput } from "./PreviousFoodItemsUpdateInput";
import { PreviousFoodItemsOutputDto } from "../PreviousFoodItemsOutputDto";

export class PreviousFoodItemsControllerBase {
  constructor(protected readonly service: PreviousFoodItemsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PreviousFoodItems })
  async createPreviousFoodItems(
    @common.Body() data: PreviousFoodItemsCreateInput
  ): Promise<PreviousFoodItems> {
    return await this.service.createPreviousFoodItems({
      data: {
        ...data,

        userFoodRequest: data.userFoodRequest
          ? {
              connect: data.userFoodRequest,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        food: true,
        id: true,
        updatedAt: true,

        userFoodRequest: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PreviousFoodItems] })
  @ApiNestedQuery(PreviousFoodItemsFindManyArgs)
  async previousFoodItemsItems(
    @common.Req() request: Request
  ): Promise<PreviousFoodItems[]> {
    const args = plainToClass(PreviousFoodItemsFindManyArgs, request.query);
    return this.service.previousFoodItemsItems({
      ...args,
      select: {
        createdAt: true,
        food: true,
        id: true,
        updatedAt: true,

        userFoodRequest: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PreviousFoodItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async previousFoodItems(
    @common.Param() params: PreviousFoodItemsWhereUniqueInput
  ): Promise<PreviousFoodItems | null> {
    const result = await this.service.previousFoodItems({
      where: params,
      select: {
        createdAt: true,
        food: true,
        id: true,
        updatedAt: true,

        userFoodRequest: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PreviousFoodItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePreviousFoodItems(
    @common.Param() params: PreviousFoodItemsWhereUniqueInput,
    @common.Body() data: PreviousFoodItemsUpdateInput
  ): Promise<PreviousFoodItems | null> {
    try {
      return await this.service.updatePreviousFoodItems({
        where: params,
        data: {
          ...data,

          userFoodRequest: data.userFoodRequest
            ? {
                connect: data.userFoodRequest,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          food: true,
          id: true,
          updatedAt: true,

          userFoodRequest: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PreviousFoodItems })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePreviousFoodItems(
    @common.Param() params: PreviousFoodItemsWhereUniqueInput
  ): Promise<PreviousFoodItems | null> {
    try {
      return await this.service.deletePreviousFoodItems({
        where: params,
        select: {
          createdAt: true,
          food: true,
          id: true,
          updatedAt: true,

          userFoodRequest: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/previous-food-items")
  @swagger.ApiOkResponse({
    type: PreviousFoodItemsOutputDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetPreviousFoodItems(
    @common.Body()
    body: string
  ): Promise<PreviousFoodItemsOutputDto[]> {
    return this.service.GetPreviousFoodItems(body);
  }
}
