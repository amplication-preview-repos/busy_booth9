/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PreviousFoodItems } from "./PreviousFoodItems";
import { PreviousFoodItemsCountArgs } from "./PreviousFoodItemsCountArgs";
import { PreviousFoodItemsFindManyArgs } from "./PreviousFoodItemsFindManyArgs";
import { PreviousFoodItemsFindUniqueArgs } from "./PreviousFoodItemsFindUniqueArgs";
import { CreatePreviousFoodItemsArgs } from "./CreatePreviousFoodItemsArgs";
import { UpdatePreviousFoodItemsArgs } from "./UpdatePreviousFoodItemsArgs";
import { DeletePreviousFoodItemsArgs } from "./DeletePreviousFoodItemsArgs";
import { UserFoodRequest } from "../../userFoodRequest/base/UserFoodRequest";
import { PreviousFoodItemsOutputDto } from "../PreviousFoodItemsOutputDto";
import { PreviousFoodItemsService } from "../previousFoodItems.service";
@graphql.Resolver(() => PreviousFoodItems)
export class PreviousFoodItemsResolverBase {
  constructor(protected readonly service: PreviousFoodItemsService) {}

  async _previousFoodItemsItemsMeta(
    @graphql.Args() args: PreviousFoodItemsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PreviousFoodItems])
  async previousFoodItemsItems(
    @graphql.Args() args: PreviousFoodItemsFindManyArgs
  ): Promise<PreviousFoodItems[]> {
    return this.service.previousFoodItemsItems(args);
  }

  @graphql.Query(() => PreviousFoodItems, { nullable: true })
  async previousFoodItems(
    @graphql.Args() args: PreviousFoodItemsFindUniqueArgs
  ): Promise<PreviousFoodItems | null> {
    const result = await this.service.previousFoodItems(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PreviousFoodItems)
  async createPreviousFoodItems(
    @graphql.Args() args: CreatePreviousFoodItemsArgs
  ): Promise<PreviousFoodItems> {
    return await this.service.createPreviousFoodItems({
      ...args,
      data: {
        ...args.data,

        userFoodRequest: args.data.userFoodRequest
          ? {
              connect: args.data.userFoodRequest,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PreviousFoodItems)
  async updatePreviousFoodItems(
    @graphql.Args() args: UpdatePreviousFoodItemsArgs
  ): Promise<PreviousFoodItems | null> {
    try {
      return await this.service.updatePreviousFoodItems({
        ...args,
        data: {
          ...args.data,

          userFoodRequest: args.data.userFoodRequest
            ? {
                connect: args.data.userFoodRequest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PreviousFoodItems)
  async deletePreviousFoodItems(
    @graphql.Args() args: DeletePreviousFoodItemsArgs
  ): Promise<PreviousFoodItems | null> {
    try {
      return await this.service.deletePreviousFoodItems(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserFoodRequest, {
    nullable: true,
    name: "userFoodRequest",
  })
  async getUserFoodRequest(
    @graphql.Parent() parent: PreviousFoodItems
  ): Promise<UserFoodRequest | null> {
    const result = await this.service.getUserFoodRequest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.Query(() => [PreviousFoodItemsOutputDto])
  async GetPreviousFoodItems(
    @graphql.Args("args")
    args: string
  ): Promise<PreviousFoodItemsOutputDto[]> {
    return this.service.GetPreviousFoodItems(args);
  }
}
