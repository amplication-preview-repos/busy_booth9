/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PreviousFoodItems as PrismaPreviousFoodItems,
  UserFoodRequest as PrismaUserFoodRequest,
} from "@prisma/client";

import { PreviousFoodItemsOutputDto } from "../PreviousFoodItemsOutputDto";

export class PreviousFoodItemsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PreviousFoodItemsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.previousFoodItems.count(args);
  }

  async previousFoodItemsItems(
    args: Prisma.PreviousFoodItemsFindManyArgs
  ): Promise<PrismaPreviousFoodItems[]> {
    return this.prisma.previousFoodItems.findMany(args);
  }
  async previousFoodItems(
    args: Prisma.PreviousFoodItemsFindUniqueArgs
  ): Promise<PrismaPreviousFoodItems | null> {
    return this.prisma.previousFoodItems.findUnique(args);
  }
  async createPreviousFoodItems(
    args: Prisma.PreviousFoodItemsCreateArgs
  ): Promise<PrismaPreviousFoodItems> {
    return this.prisma.previousFoodItems.create(args);
  }
  async updatePreviousFoodItems(
    args: Prisma.PreviousFoodItemsUpdateArgs
  ): Promise<PrismaPreviousFoodItems> {
    return this.prisma.previousFoodItems.update(args);
  }
  async deletePreviousFoodItems(
    args: Prisma.PreviousFoodItemsDeleteArgs
  ): Promise<PrismaPreviousFoodItems> {
    return this.prisma.previousFoodItems.delete(args);
  }

  async getUserFoodRequest(
    parentId: string
  ): Promise<PrismaUserFoodRequest | null> {
    return this.prisma.previousFoodItems
      .findUnique({
        where: { id: parentId },
      })
      .userFoodRequest();
  }
  async GetPreviousFoodItems(
    args: string
  ): Promise<PreviousFoodItemsOutputDto[]> {
    throw new Error("Not implemented");
  }
}
